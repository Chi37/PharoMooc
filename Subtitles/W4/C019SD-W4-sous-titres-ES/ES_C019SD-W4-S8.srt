1
00:00:00,650 --> 00:00:03,690
Buenos dias. Veremos en esta
secuencia el Framework

2
00:00:03,890 --> 00:00:06,000
web Seaside, que és un
Framework innovador para

3
00:00:06,200 --> 00:00:07,820
construir aplicaciones Web,
en Pharo.

4
00:00:08,550 --> 00:00:11,110
És muy potente y permite
de construir

5
00:00:11,310 --> 00:00:13,260
aplicaiones complejas. Veremos
que la nocion

6
00:00:13,460 --> 00:00:14,910
central és la nocion de componentes
que són

7
00:00:15,110 --> 00:00:18,290
reutilizables y con estado,
construidos sobre un

8
00:00:18,490 --> 00:00:23,000
protocolo sin estado que és http
clasico de las aplicaciones Web.

9
00:00:24,210 --> 00:00:26,310
Así que Seaside por supuesto
que és seguro por defecto,

10
00:00:26,510 --> 00:00:29,350
soporta todas las últimas novedades
Web 2 0, Ajax y

11
00:00:29,550 --> 00:00:31,850
ect.. así como las arquitecturas 
REST.

12
00:00:33,070 --> 00:00:35,180
Así que teneis la pagina Web
de Seaside donde prodreis

13
00:00:35,380 --> 00:00:40,000
consultar la documentación, así
como el libro

14
00:00:40,200 --> 00:00:42,030
gratuito de Seaside que se encuentra
en linea.

15
00:00:42,440 --> 00:00:44,670
Ademas encontrareis un conjunto 
de tutoriales sobre

16
00:00:44,870 --> 00:00:47,380
Seaside, y finalmento os aconsejo
de mirar la

17
00:00:47,580 --> 00:00:49,860
mailing list Seaside donde podreis
plantear vuestras dudas

18
00:00:50,060 --> 00:00:54,000
y existe una comunidad activa
que responde a todas las

19
00:00:54,200 --> 00:00:55,180
preguntas que necesiteis.

20
00:00:56,350 --> 00:00:57,360
Así que un poco de historia.

21
00:00:57,560 --> 00:00:59,900
Seaside esta en produción desde
el 2002.

22
00:01:00,190 --> 00:01:04,130
Esta activamente mantenido y 
ademas és tanbien uno de los

23
00:01:04,330 --> 00:01:07,240
Framworks a la base de muchas
historias de exito

24
00:01:07,440 --> 00:01:09,920
en Pharo; podeis ir a la pagina
web de Pharo y

25
00:01:10,120 --> 00:01:12,600
en este link, podreis ver que
existen muchos

26
00:01:13,330 --> 00:01:16,240
proyectos Web, y la mayoria
de estos proyectos Web 

27
00:01:16,440 --> 00:01:17,550
utilizan el Framework seaside.

28
00:01:19,050 --> 00:01:23,730
Como os decia Seaside és un
Framework Web

29
00:01:24,260 --> 00:01:26,770
centrado sobre la nocion de
componentes.

30
00:01:27,000 --> 00:01:29,810
Así que los componentes seran
reutilizables y con estado.

31
00:01:30,050 --> 00:01:33,440
De acuerdo! Y veremos un lenguage
dedicado que nos

32
00:01:33,640 --> 00:01:35,920
pemitira de facilmente de construir
estos componentes en HTML.

33
00:01:36,750 --> 00:01:39,010
Luego tendremos las reglas de
composicion de estos componentes.

34
00:01:39,460 --> 00:01:41,640
Estermos de acuerdo que hay
varias y las explicitaremos

35
00:01:41,840 --> 00:01:45,000
en una proxima secuencia. Una
aplicacion Web és

36
00:01:45,200 --> 00:01:48,080
unicamente un componente raiz,
seremos capaces de

37
00:01:48,280 --> 00:01:52,730
inspeccionar las aplicaciones Web en vivo
directamente con el debugger de Pharo.

38
00:01:53,750 --> 00:01:56,810
Luego tendreis una secuencia que os

39
00:01:57,010 --> 00:01:58,900
mostrará como hacer para generar
automaticamente los

40
00:01:59,100 --> 00:02:03,730
formularios, en todo caso
para no tener que 

41
00:02:03,930 --> 00:02:05,400
escribirlos a mano.

42
00:02:05,610 --> 00:02:07,440
Así como algunos ejemplos de
aplicaciones construidas

43
00:02:07,640 --> 00:02:09,550
con Seaside, que son en produción
desde el 2002.

44
00:02:10,490 --> 00:02:13,220
Así que si hacemos un zoom, tenemos
otros, aqui vemos

45
00:02:13,420 --> 00:02:15,530
una aplicacion que utiliz 
muchos graficos,

46
00:02:16,760 --> 00:02:18,900
así que muchos componentes que
estan relacionados los unos con

47
00:02:19,100 --> 00:02:20,660
los otros para construir una
aplicacion compleja.

48
00:02:20,930 --> 00:02:23,610
Os facilito un otro ejemplo de aplicacion

49
00:02:23,810 --> 00:02:25,650
que podeis encontrar en la pagina Web
de Pharo, así que

50
00:02:26,000 --> 00:02:30,150
tenemos realmente tablas de report
que son bastante
51
00:02:30,350 --> 00:02:33,030
complejas y interrelacionada las
unas con las otras, y podemos

52
00:02:33,230 --> 00:02:35,600
construir realmente esto 
simplemente con el Framework Seaside.

53
00:02:38,140 --> 00:02:40,470
Así que en Seaside la noción
central como ós decia és 

54
00:02:40,670 --> 00:02:42,630
la nocion de componentes.
Así que un componente no és ni

55
00:02:42,830 --> 00:02:44,000
mas ni menos que una subclase de
la clase

56
00:02:44,200 --> 00:02:45,820
WAComponent, facilitada
por el Framework Seaside.

57
00:02:47,780 --> 00:02:50,500
Así que un componente és reutilizable
y con estado y

58
00:02:50,730 --> 00:02:55,000
sera en HTML por ejemplo
bajo la forma de un div y ect.

59
00:02:56,010 --> 00:02:59,380
Así que una aplicación Web en
Seaside no és ni mas ni m

60
00:02:59,580 --> 00:03:01,670
ni menos que un componente raix,
aqui por ejemplo

61
00:03:01,870 --> 00:03:04,730
WACounter, que podremos
registra en el sistema como una

62
00:03:04,930 --> 00:03:07,200
aplicacion Web bajo el nombre Counter.

63
00:03:07,400 --> 00:03:09,930
Asi que y podremos aceder a la 
url con el nombre Counter.

64
00:03:11,060 --> 00:03:13,750
Aqui un ejemplo my aplicación
Counter

65
00:03:13,950 --> 00:03:17,380
en la url, és un componente
que se muestra aqui en

66
00:03:17,580 --> 00:03:21,780
HTML, así que la valor del Counter,
y aqui tenemos dos links "tac

67
00:03:22,100 --> 00:03:24,450
plus plus" así que si pulso 
encima incrementara

68
00:03:24,650 --> 00:03:26,920
el valor del Counter, y
"menos menos" si pulso

69
00:03:27,120 --> 00:03:28,030
encima reducira el valor del 
Counter.

70
00:03:28,680 --> 00:03:30,210
Así que ahora os mostraré el
codigo para

71
00:03:30,410 --> 00:03:31,490
implementar esta aplicación Web.

72
00:03:31,800 --> 00:03:32,750
És extremadamente simple.

73
00:03:33,020 --> 00:03:35,230
Construire un subclase de 
SWComponent  a la que llamo

74
00:03:35,430 --> 00:03:39,150
WACounter, esta clase tendra una
variable de instacia: count.

75
00:03:39,770 --> 00:03:43,420
Un metodo par inicializar el
valor del Counter a 0.

76
00:03:44,060 --> 00:03:45,770
Un metodo de increment para
aumentar el valor del

77
00:03:46,000 --> 00:03:48,630
Counter, un metodo de decrement.
De hecho solo nos

78
00:03:48,830 --> 00:03:50,220
falta ahora la parte HTML.

79
00:03:50,420 --> 00:03:53,180
Así que como vamos a describir
este Counter incapaz

80
00:03:53,380 --> 00:03:56,290
de mostrarse en HTML? De hecho
sera necesario simplemente

81
00:03:56,490 --> 00:03:59,210
facilitar un metodo 
renderContenOn, que és

82
00:03:59,410 --> 00:04:02,720
un parametro, y este parametro nos
ayudara a generar el codigo HTML.

83
00:04:04,610 --> 00:04:05,520
Aqui un ejemplo.

84
00:04:05,840 --> 00:04:08,010
Aqui facilito el metodo
renderContentOn a la classe

85
00:04:08,210 --> 00:04:12,750
Counter y me sirvo del parametro,
si , que

86
00:04:12,950 --> 00:04:16,410
és un objeto clasico Pharo,
instancia de la classe

87
00:04:16,610 --> 00:04:19,640
WHtmlCanvas, facilitada por
Seaside, y

88
00:04:19,840 --> 00:04:22,360
enviaré mensajes a este
objeto para generar el codigo HTML.

89
00:04:22,560 --> 00:04:25,100
Así que puedo generar un titulo
una ancla así que 

90
00:04:25,300 --> 00:04:27,760
una ancla és un link, y aqui
soy capaz de especificar

91
00:04:27,960 --> 00:04:30,650
a que mensaje callback,
cuando clico en este link

92
00:04:30,870 --> 00:04:32,100
ejecuta este block de codigo.

93
00:04:32,810 --> 00:04:35,500
Aqui clico sobre el link 
que se llama "+ +",

94
00:04:35,760 --> 00:04:38,760
esto ejecutara el metodo self
increase del Counter, y

95
00:04:38,960 --> 00:04:42,000
cuando clico sobre el link
"- -" esto ejecutara el

96
00:04:42,200 --> 00:04:44,000
metodo self decrease del Counter.

97
00:04:44,490 --> 00:04:45,250
Así de simple.

98
00:04:46,940 --> 00:04:47,700
Podemos ir más lejos.

99
00:04:47,900 --> 00:04:50,490
Si un error se produce cuando
clico sobre un

100
00:04:50,690 --> 00:04:52,470
link, és decir que en este
callback

101
00:04:52,670 --> 00:04:55,170
he introducido a proposito un
punto de control.

102
00:04:55,370 --> 00:04:58,890
Esto podria ser un error pero
he introducido realment un

103
00:04:59,090 --> 00:05:01,050
punto de corte en el 
metodo Decrease, selfhaltIf.

104
00:05:02,060 --> 00:05:05,770
Así que si el contador se reduce
y pasa a negativo en este

105
00:05:06,000 --> 00:05:07,760
caso se dispara la aparicion
del debugger.

106
00:05:07,960 --> 00:05:12,230
Y vemos que hago esto en mi 
aplicacion

107
00:05:12,430 --> 00:05:15,080
Web tengo el debugger aqui se
se muestra, y vemos

108
00:05:15,280 --> 00:05:18,220
bien la pila de ejecución
del programa aqui, con

109
00:05:18,420 --> 00:05:22,420
el metodo renderCounterOn,
y el decrease aqui.

110
00:05:23,670 --> 00:05:25,020
Así que nos hemos parado
correctamente en el haltIf.

111
00:05:25,850 --> 00:05:28,000
Aqui puedo modificar directamente
el codigo de mi 

112
00:05:28,200 --> 00:05:31,340
aplicacion, pulsar el
boton Proceed y my

113
00:05:31,540 --> 00:05:35,660
navegador recibira la respuesta
HTML como si nada hubiera ocurrido.

114
00:05:39,170 --> 00:05:41,000
Así que otro problema con
las aplicaciones Web és el

115
00:05:41,260 --> 00:05:44,350
problema del Back Button. Así que 
la idea és que cuando el usuario

116
00:05:44,550 --> 00:05:47,020
pulsa el Back Button esto
desincroniza el estado entre

117
00:05:47,220 --> 00:05:49,420
el servidor y el cliente.
Por ejemplo: imaginemos que

118
00:05:49,620 --> 00:05:52,440
incremento 5 veces mi contador,
así que vale 5, delante

119
00:05:52,640 --> 00:05:56,420
mio tengo un 5 que se muestra.
Pulso el boton

120
00:05:56,620 --> 00:05:59,820
de vuelta de mi navegador.
Así que voy a ver el valor 4.

121
00:06:00,080 --> 00:06:02,000
Por contra el servidor no esta
al corriente que he

122
00:06:02,200 --> 00:06:04,550
pulsado este boton de vuelta.
Así que si reclico sobre

123
00:06:04,750 --> 00:06:08,870
"Incrementar el valor del contador" 
vere la respuesta 6.

124
00:06:09,370 --> 00:06:12,230
Así que este és un problema
puesto el que lado servidor

125
00:06:12,430 --> 00:06:14,920
pensava que estava aun en 5,
y al incrementar pasamos a 6.

126
00:06:15,340 --> 00:06:17,250
¿Como gestionamos esto con Seaside?

127
00:06:17,450 --> 00:06:18,210
És muy sencillo.

128
00:06:18,450 --> 00:06:20,660
Vamos a definir un nuevo metodo
en la classe Counter

129
00:06:20,880 --> 00:06:23,720
que és el metodo States,
que devolvera un conjunto de

130
00:06:23,920 --> 00:06:25,890
objetos de los que és necesario
conservar el estado cuando pulsamos

131
00:06:26,090 --> 00:06:30,290
en el boton de vuelta. En este
caso unicamente el objeto

132
00:06:30,490 --> 00:06:32,200
self és el contador corriente.

133
00:06:33,120 --> 00:06:35,660
De acuerdo! Ahora si pulso el 
boton Devolver y

134
00:06:35,860 --> 00:06:37,940
reclico increment, tendre 
el valor correcto 5

135
00:06:38,140 --> 00:06:38,900
del ejemplo anterior.

136
00:06:41,660 --> 00:06:46,390
Así que los Callback de hecho
són bloques de codigo

137
00:06:46,600 --> 00:06:49,280
en los que tenemos toda la 
potencia de Pharo.

138
00:06:49,480 --> 00:06:52,880
Así que aqui en un Callback pudeo
escribir cualquier codigo Pharo.

139
00:06:54,130 --> 00:06:57,090
Aqui he tomoado un ejemplo mas complejo
donde esta vez

140
00:06:57,580 --> 00:07:00,270
puedo utilizar una alternativa
para decir incremento el

141
00:07:00,470 --> 00:07:03,120
contador de un punto o de
dos puntos en funcion de si és

142
00:07:03,320 --> 00:07:05,490
un nombre par o inpar por ejemplo.

143
00:07:06,040 --> 00:07:10,140
My Counter se incrementara mas rapido
en un caso en

144
00:07:10,340 --> 00:07:11,630
en lugar de incrementarse de golpe.

145
00:07:12,680 --> 00:07:17,360
Podemos ver que tenemos realmente
una gran potencia 

146
00:07:17,560 --> 00:07:18,350
con estos bloques de Callback.

147
00:07:21,660 --> 00:07:24,230
Por ejemplo en el caso anterior,
si 

148
00:07:24,430 --> 00:07:28,330
pulso en "+ +" aqui
llegaremos a

149
00:07:28,890 --> 00:07:33,160
una nueva ventana que me dice
que se trata de un numero par.

150
00:07:36,560 --> 00:07:37,950
Os puedo mostra otro ejemplo.

151
00:07:38,730 --> 00:07:42,050
En este caso és una aplicacion en la
que el usuario

152
00:07:42,250 --> 00:07:43,060
introduce su nombre.

153
00:07:43,450 --> 00:07:45,340
Nos gustaria que el usuario pudiera
introducir su nombre

154
00:07:45,540 --> 00:07:48,430
y cuando pulse el boton 
Say Hello aqui, 

155
00:07:48,630 --> 00:07:50,770
nos gustaria mostrarle una
cadena de caracteres que és

156
00:07:51,450 --> 00:07:54,890
"Hi" y su nombre, el nombre
que ha intrudució al inicio aqui.

157
00:07:55,090 --> 00:07:58,440
De acuerdo! Como puedo hacer
para escribir esta

158
00:07:58,640 --> 00:08:00,350
aplicacion en Seaside?

159
00:08:00,650 --> 00:08:01,510
Muy sencillo.

160
00:08:01,940 --> 00:08:03,910
Construire una subclase de la 
classe WAComponent,

161
00:08:05,060 --> 00:08:06,750
que dotare con una variable de
instancio username.

162
00:08:07,500 --> 00:08:09,500
Y en el metodo renderContenOn,
esta que os 

163
00:08:09,700 --> 00:08:13,760
enseño aqui, simplemente
mostraré el campo username

164
00:08:14,310 --> 00:08:15,780
y dire un Text Input.

165
00:08:16,040 --> 00:08:18,090
Así que le Text Input és el 
campo de texto que habeis

166
00:08:18,290 --> 00:08:20,270
visto anteriormente en el 
que el usuario podia escribir "Bob".

167
00:08:20,820 --> 00:08:24,040
Y tendre un Callback,
esta vez el Callback és un bloque

168
00:08:24,240 --> 00:08:26,260
un bloque que és a un parametro Value.

169
00:08:26,820 --> 00:08:29,290
Así que el parametro Value este
bloque sera la cadena de

170
00:08:29,490 --> 00:08:31,910
caracteres que ha introducido
el usuario en el campo

171
00:08:32,110 --> 00:08:33,530
texto, en nuestro ejemplo Bob.

172
00:08:33,870 --> 00:08:35,370
Y seremos capaces de guardar 
esta cadena de

173
00:08:35,570 --> 00:08:38,820
caracteres en la variable de
instancia del componente "Peter", username.

174
00:08:39,600 --> 00:08:43,610
Luego cuando pulsemos en el 
SubmitButton

175
00:08:43,810 --> 00:08:45,590
diremos cuando pulso sobre 
el boton sere capaz

176
00:08:45,790 --> 00:08:48,400
self inform, aqui llamare
a un nuevo componente

177
00:08:48,600 --> 00:08:51,580
en el que dire
"Muestra la cadena Hi Bob".

178
00:08:52,000 --> 00:08:54,770
Así que concateno la cadena de
caracteres con el campo

179
00:08:55,000 --> 00:08:56,390
Hi con el que habia entrado en 
el campo texto anterior.

180
00:09:00,120 --> 00:09:02,850
Espero que hayais remarcado que,
para aquellos que

181
00:09:03,050 --> 00:09:05,440
teneis la constumbre de construir
aplicacions Web, en Seaside

182
00:09:05,640 --> 00:09:09,190
no he hablado de partes de la
peticion, és que

183
00:09:09,390 --> 00:09:11,860
hay parametros en la peticion,
en la URL etc.

184
00:09:12,060 --> 00:09:13,870
No he hablado de configuración del 
fichero con sus correos

185
00:09:14,070 --> 00:09:15,620
complicados, no he hablado de
ficheros, no he 

186
00:09:15,820 --> 00:09:20,230
hablado de paginas, no he hablado
de links con la pagina siguiente.

187
00:09:21,020 --> 00:09:24,770
De hecho solo he hablado de
componentes, objetos,

188
00:09:25,000 --> 00:09:28,150
mensajes, Callback y de la
posibilidad de inspeccionar

189
00:09:28,820 --> 00:09:31,930
directamente el codigo gracias
al debuger de Pharo.

190
00:09:33,420 --> 00:09:35,000
En resumen lo que se debe
retener és que una

191
00:09:35,200 --> 00:09:37,620
aplicacion Web en Seaside és facil, 

192
00:09:37,820 --> 00:09:40,190
és un componente raiz y veremos
que se puede conbinar los

193
00:09:40,390 --> 00:09:43,790
componentes entre ellos para construir
aplicaicones más complejas.

194
00:09:44,670 --> 00:09:47,480
Un componente sabe mostrarse en HTML
gracias a su metodo renderCounterOn.

195
00:09:47,680 --> 00:09:52,630
Disponemos de un lenguage dedicado
que permite generar el codigo

196
00:09:52,830 --> 00:09:54,170
HTML para cada uno de los componentes.

197
00:09:54,520 --> 00:09:57,700
Veremos este lenguage más en detalle
en la proxima secuencia.
