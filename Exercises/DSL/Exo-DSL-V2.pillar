!! Crafting a simple embedded DSL with Pharo


In this chapter you will develop a simple domain specific language (DSL) for rolling dice. Players of games such as Dungeons & Dragons are familiar with such DSL. An example of such DSL is the following expression: ==2 D20 + 1 D6== which means that we should roll two 20-faces dices and one 6 faces die. 
It is called an embedded DSL because the DSL uses the syntax of the language used to implement it. Here we use the Pharo syntax to implement the Dungeons & Dragons rolling die language. 

This little exercise shows how we can (1) simply reuse traditional operator such as ==+==, (2) develop an embedded domain specific language and (3) use class extensions (the fact that we can define a method in another package than the one of the class of the method).


Pay attention that the companion video is slightly different: the difference are (1) we rewrote tests that check that errors are not raised and (2) the class creation method is now call ==withFaces:== instead of ==faces:== because some students got confused, (3) the class ==DiceHandle== is not named ==DieHandle==.

!!! Getting started

Using the code browser, define a package named ==Dice== or any name you like.

!!!! Create a test 
It is always empowering to verify that the code we write is always working as we defining it. For this purpose you should create a unit test. Remember unit testing was promoted by K. Beck first

